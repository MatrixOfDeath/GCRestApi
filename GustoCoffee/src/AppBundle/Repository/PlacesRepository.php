<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProduitsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlacesRepository extends EntityRepository
{

    /**
     * @param $idsalle
     * @return array
     */
    public function getAllPositions($idsalle=4){
        $qb = $this->createQueryBuilder('p')
            ->Select('p.position, p.idplace, p.nomplace')
            ->where('p.idsalle = :idsalle')
            ->setParameter('idsalle', $idsalle);
//            ->orderBy('u.ligne', 'ASC');

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $idposition
     * @return array
     */
    public function getByPosition($idposition){
        $idsalle = 4;
        $qb = $this->createQueryBuilder('u')
            ->Select('u.idplace')
            ->where('u.idsalle = :idsalle')
            ->andWhere('u.position = :position')
            ->setParameter('position', $idposition)
            ->setParameter('idsalle', $idsalle);
//            ->orderBy('u.ligne', 'ASC');

        return $qb->getQuery()->getResult();
    }

    /**
     * Retourne toutes les places disponibles selons un créneau horaire donné
     * @param $heureChoixDebut
     * @param $heureChoixFin
     * @return array
     */
    public function checkDisponibilitePlace($heureChoixDebut, $heureChoixFin)
    {
        $subQuery = $this->createQueryBuilder('p_sub')
            ->select('p_sub.idplace')
            ->leftJoin('p_sub.reservation', 'r')
            ->andwhere('r.heuredebut < :heureChoixDebut')
            ->andWhere('r.heurefin > :heureChoixDebut OR r.heurefin >= :heureChoixFin')
            ->orWhere('r.heuredebut <= :heureChoixFin AND r.heurefin >= :heureChoixFin')
            ->orWhere('r.heuredebut > :heureChoixDebut AND r.heurefin <= :heureChoixFin');

        $queryBuilder = $this->createQueryBuilder('p');

        $query = $queryBuilder
            ->where($queryBuilder->expr()->notIn('p.idplace', $subQuery->getDQL()))
//            ->andWhere(':heureChoixDebut < :datenow')
            //->setParameter('datenow', date("Y-m-d H:i:s"))
            ->setParameter('heureChoixDebut', $heureChoixDebut)
            ->setParameter('heureChoixFin', $heureChoixFin);

        return $query->getQuery()->getResult();
    }


    /**
     * Retourne toutes les places disponibles selons un créneau horaire donné
     * @param $heureChoixDebut
     * @param $heureChoixFin
     * @return array
     */
    public function checkUnavailablePlace($heureChoixDebut, $heureChoixFin)
    {
        $subQuery = $this->createQueryBuilder('p_sub')
            ->select('p_sub.idplace')
            ->leftJoin('p_sub.reservation', 'r')
            ->andwhere('r.heuredebut < :heureChoixDebut')
            ->andWhere('r.heurefin > :heureChoixDebut OR r.heurefin >= :heureChoixFin')
            ->orWhere('r.heuredebut <= :heureChoixFin AND r.heurefin >= :heureChoixFin')
            ->orWhere('r.heuredebut > :heureChoixDebut AND r.heurefin <= :heureChoixFin');

        $queryBuilder = $this->createQueryBuilder('p');

        $query = $queryBuilder
            ->select('p.position, p.idplace, p.nomplace')
            ->where($queryBuilder->expr()->in('p.idplace', $subQuery->getDQL()))
//            ->andWhere(':heureChoixDebut < :datenow')
            //->setParameter('datenow', date("Y-m-d H:i:s"))
            ->setParameter('heureChoixDebut', $heureChoixDebut)
            ->setParameter('heureChoixFin', $heureChoixFin);

        return $query->getQuery()->getResult();
    }

    /**
     * Retourne toutes les places disponibles selons un créneau horaire donné
     * @param $heureChoixDebut
     * @param $heureChoixFin
     * @return array
     */
    public function checkDisponibilitePosition($heureChoixDebut, $heureChoixFin)
    {
        $subQuery = $this->createQueryBuilder('p_sub')
            ->select('p_sub.idplace')
            ->leftJoin('p_sub.reservation', 'r')
            ->andwhere('r.heuredebut < :heureChoixDebut')
            ->andWhere('r.heurefin > :heureChoixDebut OR r.heurefin >= :heureChoixFin')
            ->orWhere('r.heuredebut <= :heureChoixFin AND r.heurefin >= :heureChoixFin')
            ->orWhere('r.heuredebut > :heureChoixDebut AND r.heurefin <= :heureChoixFin');

        $queryBuilder = $this->createQueryBuilder('p');

        $query = $queryBuilder
            ->select('p.position, p.idplace, p.nomplace')
            ->where($queryBuilder->expr()->notIn('p.idplace', $subQuery->getDQL()))
//            ->andWhere(':heureChoixDebut < :datenow')
            //->setParameter('datenow', date("Y-m-d H:i:s"))
            ->setParameter('heureChoixDebut', $heureChoixDebut)
            ->setParameter('heureChoixFin', $heureChoixFin);

        return $query->getQuery()->getResult();
    }
    /**
     * Verification si une place est disponible selon un creneau horaire
     * @param $heureChoixDebut
     * @param $heureChoixFin
     * @param null $idplace
     * @return mixed
     */
    public function checkIfPlaceDispo($heureChoixDebut, $heureChoixFin, $idplace=null){

        $subQuery = $this->createQueryBuilder('p_sub')
            ->select('p_sub.idplace')
            ->leftJoin('p_sub.reservation', 'r')
            ->andwhere('r.heuredebut < :heureChoixDebut')
            ->andWhere('r.heurefin > :heureChoixDebut OR r.heurefin >= :heureChoixFin')
            ->orWhere('r.heuredebut <= :heureChoixFin AND r.heurefin >= :heureChoixFin')
            ->orWhere('r.heuredebut > :heureChoixDebut AND r.heurefin <= :heureChoixFin');

        $queryBuilder = $this->createQueryBuilder('p');

        $query = $queryBuilder
            ->select('count(p.idplace)')
            ->where($queryBuilder->expr()->notIn('p.idplace', $subQuery->getDQL()))
            ->andWhere('p.idplace = :idplace')
            ->setParameter('idplace', $idplace)
            ->setParameter('heureChoixDebut', $heureChoixDebut)
            ->setParameter('heureChoixFin', $heureChoixFin);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getPlaceUnavailable(){
        $qb = $this->createQueryBuilder('u')
            ->Select('u.position')
            ->where('u.statutplace = indisponible');

        return $qb->getQuery()->getResult();
    }

    public function findArray($array)
    {
        $qb = $this->createQueryBuilder('u')
                ->Select('u')
                ->Where('u.idplace IN (:array)')
                ->setParameter('array', $array);
        return $qb->getQuery()->getResult();
    }

    public function recherche($chaine)
    {
         $qb = $this->createQueryBuilder('u')
                    ->select('u')
                    ->where('u.nom like :chaine')
                    ->andWhere('u.disponible = 1')
                    ->orderBy('u.idproduit')
                    ->setParameter('chaine', $chaine);
        return $qb->getQuery()->getResult();
    }
}
